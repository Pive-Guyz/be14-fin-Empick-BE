package com.piveguyz.empickbackend.common.config;

import com.piveguyz.empickbackend.auth.command.jwt.JwtAuthenticationFilter;
import com.piveguyz.empickbackend.security.CustomMemberDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {

    private final CustomMemberDetailsService customMemberDetailsService;

    @Autowired
    public SecurityConfig(CustomMemberDetailsService customMemberDetailsService) {
        this.customMemberDetailsService = customMemberDetailsService;
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http,
                                           JwtAuthenticationFilter jwtAuthenticationFilter,
                                           JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,
                                           CustomAccessDeniedHandler customAccessDeniedHandler) throws Exception {
        http
                .cors(Customizer.withDefaults()) // CORS Ï†ÅÏö©
                .csrf(csrf -> csrf.disable())    // CSRF ÎÅÑÍ∏∞
                .authorizeHttpRequests(auth -> auth
                        // ‚úÖ Ïù∏Ï¶ùÏù¥ ÌïÑÏöî ÏóÜÎäî Í≤ΩÎ°ú (Í∞ÄÏû• Î®ºÏ†Ä ÏÑ§Ï†ï)
                        .requestMatchers(
                                "/v3/api-docs/**",
                                "/swagger-ui/**",
                                "/swagger-ui.html",
                                "/swagger-resources/**",
                                "/webjars/**",
                                "/actuator/health",                     // ALB Health Check
                                "/api/v1/auth/**",                      // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ
                                "/api/v1/employment/jobtests/exam/**",  // Ïã§Î¨¥ÌÖåÏä§Ìä∏ ÏùëÏãú Í¥ÄÎ†®
                                "/api/v1/employment/answers/**",        // Ïã§Î¨¥ÌÖåÏä§Ìä∏ ÎãµÏïà Ï†úÏ∂ú
                                "/api/v1/employment/jobtests/*"         // Ïã§Î¨¥ÌÖåÏä§Ìä∏ Î¨∏Ï†ú Ï°∞Ìöå
                                // "/api/v1/**"                         // ÌÖåÏä§Ìä∏Ïö© (ÌïÑÏöîÏãú Ï£ºÏÑù Ìï¥Ï†ú)
                        ).permitAll()

                        // ‚úÖ Í∂åÌïúÎ≥Ñ Ï†ëÍ∑º Ï†úÏñ¥ (Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤ΩÎ°úÎ∂ÄÌÑ∞ ÏÑ§Ï†ï)
                        // Ïã§Î¨¥ÌÖåÏä§Ìä∏/Î¨∏Ï†ú - Ïù∏ÏÇ¨ÌåÄ, ÌåÄÏû•ÍπåÏßÄ Í∞ÄÎä•
                        .requestMatchers("/api/v1/employment/questions/**").hasAnyRole("HR_ACCESS", "APPROVAL_PROCESSOR")
                        .requestMatchers("/api/v1/employment/jobtests/**").hasAnyRole("HR_ACCESS", "APPROVAL_PROCESSOR")

                        // Ï±ÑÏö© Í¥ÄÎ†® - Ïù∏ÏÇ¨ÌåÄÎßå Í∞ÄÎä•
                        .requestMatchers("/api/v1/employment/**").hasAnyRole("HR_ACCESS")

                        // Í≤∞Ïû¨ - USER Í∂åÌïú
                        .requestMatchers("/api/v1/approval/**").hasAnyRole("USER")

                        // Í∑ºÌÉú - USER Í∂åÌïú
                        .requestMatchers("/api/v1/attendance/**").hasAnyRole("USER")

                        // üîí Í∑∏ Ïô∏ Î™®Îì† /api/** Í≤ΩÎ°úÎäî JWT Ïù∏Ï¶ù ÌïÑÏöî
                        .requestMatchers("/api/**").authenticated()

                        // üîí ÎÇòÎ®∏ÏßÄ Î™®Îì† Í≤ΩÎ°úÎäî Ïù∏Ï¶ù ÌïÑÏöî (Î∞òÎìúÏãú ÎßàÏßÄÎßâÏóê!)
                        .anyRequest().authenticated()
                )
                .exceptionHandling(ex -> ex
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)      // 401 Ï≤òÎ¶¨
                        .accessDeniedHandler(customAccessDeniedHandler)             // 403 Ï≤òÎ¶¨
                )
                // JWT Ïù∏Ï¶ù ÌïÑÌÑ∞ Ï∂îÍ∞Ä
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOriginPattern("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}