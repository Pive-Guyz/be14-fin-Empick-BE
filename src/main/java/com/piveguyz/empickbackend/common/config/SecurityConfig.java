package com.piveguyz.empickbackend.common.config;

import com.piveguyz.empickbackend.auth.command.jwt.JwtAuthenticationFilter;
import com.piveguyz.empickbackend.security.CustomMemberDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {

    private final CustomMemberDetailsService customMemberDetailsService;

    @Autowired
    public SecurityConfig(CustomMemberDetailsService customMemberDetailsService) {
        this.customMemberDetailsService = customMemberDetailsService;
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http,
                                           JwtAuthenticationFilter jwtAuthenticationFilter,
                                           JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,
                                           CustomAccessDeniedHandler customAccessDeniedHandler) throws Exception {
        http
                .cors(Customizer.withDefaults()) // CORS Ï†ÅÏö©
                .csrf(csrf -> csrf.disable())    // CSRF ÎÅÑÍ∏∞
                .authorizeHttpRequests(auth -> auth

                                // ‚úÖ Ïù∏Ï¶ùÏù¥ ÌïÑÏöî ÏóÜÎäî Í≤ΩÎ°ú
                                .requestMatchers(
                                        "/v3/api-docs/**",
                                        "/swagger-ui/**",
                                        "/swagger-ui.html",
                                        "/swagger-resources/**",
                                        "/webjars/**",
                                        "/actuator/**",                         // Actuator ÏóîÎìúÌè¨Ïù∏Ìä∏ (Health CheckÏö©)
                                        "/api/v1/auth/**",                      // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ
                                        "/api/v1/employment/jobtests/exam/**",  // Ïã§Î¨¥ÌÖåÏä§Ìä∏ ÏùëÏãú Í¥ÄÎ†®
                                        "/api/v1/employment/answers/**",        // Ïã§Î¨¥ÌÖåÏä§Ìä∏ ÎãµÏïà Ï†úÏ∂ú
                                        "/api/v1/employment/jobtests/*",      // Ïã§Î¨¥ÌÖåÏä§Ìä∏ Î¨∏Ï†ú Ï°∞Ìöå
//                                "/api/v1/**"                // ÌÖåÏä§Ìä∏Ïö©ÏúºÎ°ú Î™®Îì† Í≤ΩÎ°ú sequrity Ï≤òÎ¶¨ ÏïàÎêòÍ≤å
                                  
                                //  Career ÌéòÏù¥ÏßÄ - Ï±ÑÏö©Í≥µÍ≥† Í¥ÄÎ†®
                                "/api/v1/employment/recruitments",                           // Ï±ÑÏö©Í≥µÍ≥† Î™©Î°ù
                                "/api/v1/employment/recruitments/**",                       // Ï±ÑÏö©Í≥µÍ≥† ÏÉÅÏÑ∏ Î∞è ÌïòÏúÑ Í≤ΩÎ°ú
                                "/api/v1/employment/recruitments/requests/**",              // Ï±ÑÏö© ÏöîÏ≤≠ÏÑú
                                "/api/v1/employment/recruitments/processes/**",             // Ï±ÑÏö© ÌîÑÎ°úÏÑ∏Ïä§

                                //  Career ÌéòÏù¥ÏßÄ - ÏßÄÏõêÏûê/ÏßÄÏõêÏÑú Í¥ÄÎ†®
                                "/api/v1/employment/applicant/create",                      // ÏßÄÏõêÏûê ÏÉùÏÑ±
                                "/api/v1/employment/application",                           // ÏßÄÏõêÏÑú ÏÉùÏÑ±
                                "/api/v1/employment/application-response",                  // Ïù¥Î†•ÏÑú ÏùëÎãµ Ï†ÄÏû•
                                "/api/v1/employment/applications/items/**",                 // ÏßÄÏõêÏÑú Ìï≠Î™© Ï°∞Ìöå

                                //  Career ÌéòÏù¥ÏßÄ - ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Í¥ÄÎ†®
                                "/api/v1/employment/introduce",                             // ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÏÉùÏÑ±/Ï°∞Ìöå
                                "/api/v1/employment/introduce/**",                          // ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Í¥ÄÎ†® Î™®Îì† Í≤ΩÎ°ú
                                "/api/v1/employment/introduce-template/**",                 // ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌÖúÌîåÎ¶ø
                                "/api/v1/employment/introduce-template-item-response",      // ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Ìï≠Î™©Î≥Ñ ÏùëÎãµ

                                //  Career ÌéòÏù¥ÏßÄ - ÎßàÏä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞
                                "/api/v1/jobs",                                             // ÏßÅÎ¨¥ Î™©Î°ù
                                "/api/v1/departments",                                      // Î∂ÄÏÑú Î™©Î°ù

                                //  Career ÌéòÏù¥ÏßÄ - ÌååÏùº Í¥ÄÎ†®
                                "/api/v1/files/upload",                                     // ÌååÏùº ÏóÖÎ°úÎìú (ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ)
                                "/api/v1/files/download"                                    // ÌååÏùº Îã§Ïö¥Î°úÎìú
                                  
                                ).permitAll()

                                // ‚úÖ Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Í≤ΩÎ°ú
                                // Í≤∞Ïû¨
                                .requestMatchers("/api/v1/approval/**").hasAnyRole("USER")

                                // Í∑ºÌÉú
                                .requestMatchers("/api/v1/attendance/**").hasAnyRole("USER")


                                // Ïã§Î¨¥ÌÖåÏä§Ìä∏/Î¨∏Ï†ú - Ïù∏ÏÇ¨ÌåÄ, ÌåÄÏû•ÍπåÏßÄ Í∞ÄÎä•
                                .requestMatchers("/api/v1/employment/questions/**").hasAnyRole("HR_ACCESS", "APPROVAL_PROCESSOR")
                                .requestMatchers("/api/v1/employment/jobtests/**").hasAnyRole("HR_ACCESS", "APPROVAL_PROCESSOR")
                                // Ï±ÑÏö© Í¥ÄÎ†® - Ïù∏ÏÇ¨ÌåÄÎßå Í∞ÄÎä•
                                .requestMatchers("/api/v1/employment/**").hasAnyRole("HR_ACCESS")

                                // üîí Í∑∏ Ïô∏ Î™®Îì† /api/** Í≤ΩÎ°úÎäî JWT Ïù∏Ï¶ù ÌïÑÌÑ∞ ÏûëÎèô
                                .requestMatchers("/api/**").authenticated()
                                // üîí ÎÇòÎ®∏ÏßÄ Í≤ΩÎ°úÎäî Í∏∞Î≥∏ Ïù∏Ï¶ù
                                .anyRequest().authenticated()
                ).exceptionHandling(ex -> ex
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)      // 401 Ï≤òÎ¶¨
                        .accessDeniedHandler(customAccessDeniedHandler)             // 403 Ï≤òÎ¶¨

                )
                // JWT Ïù∏Ï¶ù ÌïÑÌÑ∞ Ï∂îÍ∞Ä
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOriginPattern("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}