name: Deploy Backend to VPC2

# 🔧 CI/CD Test: Actuator 의존성 수정 후 배포 테스트 (2024-12-19)
on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "build.gradle"
      - ".github/workflows/**"
      - "README.md"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  JAVA_VERSION: 17
  S3_BUCKET: empick-bucket
  S3_KEY: releases/empick-backend-latest.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 🔧 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 📦 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean build -x test

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📤 Upload JAR to S3
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*plain*" | head -n 1)
          echo "Uploading $JAR_FILE to S3..."
          aws s3 cp "$JAR_FILE" s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}
          echo "✅ JAR uploaded successfully"

      - name: 🚀 Deploy via SSM
        run: |
          echo "🚀 Starting SSM deployment to both instances..."

          # Deploy to Blue Instance
          echo "📦 Deploying to Blue Instance..."
          aws ssm send-command \
            --instance-ids ${{ secrets.BLUE_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo systemctl stop empick-backend || true",
              "cd /opt/empick",
              "sudo -u springboot aws s3 cp s3://empick-bucket/releases/empick-backend-latest.jar /opt/empick/empick-backend.jar --region ap-northeast-2",
              "sudo chown springboot:springboot empick-backend.jar",
              "sudo chmod +x empick-backend.jar",
              "sudo systemctl start empick-backend",
              "echo \"✅ Blue instance deployment completed\""
            ]' \
            --output text

          # Deploy to Green Instance
          echo "📦 Deploying to Green Instance..."
          aws ssm send-command \
            --instance-ids ${{ secrets.GREEN_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo systemctl stop empick-backend || true",
              "cd /opt/empick",
              "sudo -u springboot aws s3 cp s3://empick-bucket/releases/empick-backend-latest.jar /opt/empick/empick-backend.jar --region ap-northeast-2",
              "sudo chown springboot:springboot empick-backend.jar",
              "sudo chmod +x empick-backend.jar",
              "sudo systemctl start empick-backend",
              "echo \"✅ Green instance deployment completed\""
            ]' \
            --output text

          echo "⏰ Waiting for deployment to complete..."
          sleep 60

      - name: 🏥 Health Check
        run: |
          echo "🏥 Performing health check..."

          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12..."
            if curl -f -s ${{ secrets.ALB_HEALTH_CHECK_URL }}; then
              echo "✅ Health check passed!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ Health check failed after 12 attempts"
              exit 1
            fi
            sleep 15
          done

      - name: 🎉 Deployment Summary
        run: |
          echo "🎉 Deployment Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ JAR Build: SUCCESS"
          echo "✅ S3 Upload: SUCCESS"
          echo "✅ Blue Instance Deploy: SUCCESS"
          echo "✅ Green Instance Deploy: SUCCESS"
          echo "✅ Health Check: SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Application URL: ${{ secrets.ALB_URL }}"
          echo "🏥 Health Check: ${{ secrets.ALB_HEALTH_CHECK_URL }}"
          echo "📊 API Endpoint: ${{ secrets.ALB_URL }}/api"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Troubleshooting steps:"
          echo "1. Check AWS SSM Run Command status"
          echo "2. SSH to instances and check logs: sudo journalctl -u empick-backend -f"
          echo "3. Verify S3 bucket permissions"
          echo "4. Check EC2 IAM roles for S3 access"
