name: Deploy Backend to VPC2 (Simple Strategy)

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "build.gradle"
      - ".github/workflows/**"
      - "README.md"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  JAVA_VERSION: 17
  S3_BUCKET: empick-bucket
  S3_KEY: releases/empick-backend-latest.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 🔧 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 📦 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean build -x test

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📤 Upload JAR to S3
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*plain*" | head -n 1)
          echo "Uploading $JAR_FILE to S3..."
          aws s3 cp "$JAR_FILE" s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}
          echo "✅ JAR uploaded successfully"

      - name: 🔑 Setup SSH Key
        run: |
          echo "🔑 Setting up SSH key for deployment..."
          mkdir -p ~/.ssh

                              # SSH 키를 안전하게 저장 (여러 방법 시도)
          echo "🔧 Creating SSH key with multiple format attempts..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/camp.pem
          chmod 600 ~/.ssh/camp.pem

          echo "🔧 Original key file size: $(wc -c < ~/.ssh/camp.pem) bytes"

          # 여러 키 형식 변환 시도
          echo "🔧 Attempting key format conversions..."

          # 방법 1: OpenSSL RSA 변환
          if openssl rsa -in ~/.ssh/camp.pem -out ~/.ssh/camp_rsa.pem 2>/dev/null; then
            echo "✅ OpenSSL RSA conversion successful"
            cp ~/.ssh/camp_rsa.pem ~/.ssh/camp.pem
            chmod 600 ~/.ssh/camp.pem
          fi

          # 방법 2: PKCS#8 형식으로 변환
          if openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in ~/.ssh/camp.pem -out ~/.ssh/camp_pkcs8.pem 2>/dev/null; then
            echo "✅ PKCS#8 conversion successful"
            cp ~/.ssh/camp_pkcs8.pem ~/.ssh/camp.pem
            chmod 600 ~/.ssh/camp.pem
          fi

          # 방법 3: ssh-keygen으로 OpenSSH 형식 변환
          if ssh-keygen -p -m OpenSSH -N "" -f ~/.ssh/camp.pem 2>/dev/null; then
            echo "✅ OpenSSH format conversion successful"
          fi

          echo "🔧 Final key file size: $(wc -c < ~/.ssh/camp.pem) bytes"
          echo "🔧 Key file type: $(file ~/.ssh/camp.pem)"

          # SSH 키 검증
          echo "🔍 SSH key validation:"
          echo "Key file size: $(wc -c < ~/.ssh/camp.pem) bytes"
          echo "Key file first line: $(head -n1 ~/.ssh/camp.pem)"
          echo "Key file last line: $(tail -n1 ~/.ssh/camp.pem)"
          echo "Key file line count: $(wc -l < ~/.ssh/camp.pem)"

          # 파일 내용 hex dump (처음 50바이트)
          echo "Key file hex dump (first 50 bytes):"
          hexdump -C ~/.ssh/camp.pem | head -n 4

          # SSH 키 유효성 검사 (상세 에러 출력)
          echo "🔍 Running ssh-keygen validation..."
          if ssh-keygen -l -f ~/.ssh/camp.pem 2>/dev/null; then
            echo "✅ SSH key is valid"
          else
            echo "⚠️ ssh-keygen validation failed, but file format looks correct"
            echo "🔧 File type: $(file ~/.ssh/camp.pem)"
            echo "🔧 This might be an OpenSSH version compatibility issue"
            echo "🔧 Proceeding with SSH connection test..."
          fi

          ssh-keyscan -H ${{ secrets.BASTION_IP }} >> ~/.ssh/known_hosts

          # SSH 에이전트 시작 및 키 추가 시도
          echo "🔧 Starting SSH agent and adding key..."
          eval $(ssh-agent -s)
          if ssh-add ~/.ssh/camp.pem 2>/dev/null; then
            echo "✅ SSH key added to agent successfully"
            export SSH_AUTH_SOCK=$SSH_AUTH_SOCK
            export SSH_AGENT_PID=$SSH_AGENT_PID
          else
            echo "⚠️ Failed to add key to SSH agent, using direct key file"
          fi

          echo "🔍 SSH key setup completed"

      - name: 🧪 Test SSH Connection
        run: |
          echo "🧪 Testing SSH connection to Bastion..."
          echo "🔧 SSH client version: $(ssh -V 2>&1)"
          echo "🔧 OpenSSL version: $(openssl version)"

          # SSH 연결 테스트 (더 관대한 옵션 사용)
          echo "🔧 Testing network connectivity first..."
          if ping -c 2 -W 5 ${{ secrets.BASTION_IP }} >/dev/null 2>&1; then
            echo "✅ Network connectivity OK"
          else
            echo "⚠️ Network connectivity issue detected"
            echo "🔧 Trying nslookup..."
            nslookup ${{ secrets.BASTION_IP }} || true
          fi

          echo "🔧 Attempting SSH connection..."
          if timeout 30 ssh -i ~/.ssh/camp.pem -o ConnectTimeout=20 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR ec2-user@${{ secrets.BASTION_IP }} 'echo "✅ SSH connection successful"'; then
            echo "✅ Bastion SSH connection test passed"
          else
            echo "❌ Bastion SSH connection test failed"
            echo "🔧 Detailed diagnosis:"
            echo "🔧 SSH key test:"
            ssh-keygen -l -f ~/.ssh/camp.pem 2>&1 || echo "Key validation failed"
            echo "🔧 Connection test with timeout:"
            timeout 15 ssh -v -i ~/.ssh/camp.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${{ secrets.BASTION_IP }} 'echo test' 2>&1 | head -10 || echo "SSH connection timed out"
            exit 1
          fi

      - name: 🚀 Deploy to Both Instances (SSH Strategy)
        run: |
          echo "🔄 Starting deployment to both Blue and Green instances..."

          # Deploy to Blue Instance (AZ-A)
          echo "📦 Deploying to Blue Instance..."
          ssh -i ~/.ssh/camp.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${{ secrets.BASTION_IP }} ec2-user@10.0.11.105 '
            echo "🔄 Starting deployment on Blue instance..."
            sudo systemctl stop empick-backend || true
            cd /opt/empick
            sudo -u springboot wget -O empick-backend.jar https://empick-bucket.s3.ap-northeast-2.amazonaws.com/releases/empick-backend-latest.jar
            sudo chown springboot:springboot empick-backend.jar
            sudo chmod +x empick-backend.jar
            sudo systemctl start empick-backend
            echo "✅ Deployment completed on Blue instance"
          '

          # Deploy to Green Instance (AZ-C)  
          echo "📦 Deploying to Green Instance..."
          ssh -i ~/.ssh/camp.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${{ secrets.BASTION_IP }} ec2-user@10.0.12.150 '
            echo "🔄 Starting deployment on Green instance..."
            sudo systemctl stop empick-backend || true
            cd /opt/empick
            sudo -u springboot wget -O empick-backend.jar https://empick-bucket.s3.ap-northeast-2.amazonaws.com/releases/empick-backend-latest.jar
            sudo chown springboot:springboot empick-backend.jar
            sudo chmod +x empick-backend.jar
            sudo systemctl start empick-backend
            echo "✅ Deployment completed on Green instance"
          '

      - name: ⏰ Wait for services to start
        run: |
          echo "⏰ Waiting 60 seconds for services to start..."
          sleep 60

      - name: 🏥 Health Check
        run: |
          echo "🏥 Performing health checks..."

          # ALB Health Check (최종 확인)
          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12..."
            if curl -f -s ${{ secrets.ALB_HEALTH_CHECK_URL }}; then
              echo "✅ ALB Health check passed!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ Health check failed after 12 attempts"
              exit 1
            fi
            sleep 15
          done

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 Deployment Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ JAR Build: SUCCESS"
          echo "✅ S3 Upload: SUCCESS" 
          echo "✅ Blue Instance Deploy: SUCCESS"
          echo "✅ Green Instance Deploy: SUCCESS"
          echo "✅ Health Check: SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Application URL: ${{ secrets.ALB_URL }}"
          echo "🏥 Health Check: ${{ secrets.ALB_HEALTH_CHECK_URL }}"
          echo "📊 API Endpoint: ${{ secrets.ALB_URL }}/api"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Troubleshooting steps:"
          echo "1. Check AWS SSM Run Command status"
          echo "2. SSH to instances and check logs: sudo journalctl -u empick-backend -f"
          echo "3. Verify S3 bucket permissions"
          echo "4. Check EC2 IAM roles for S3 access"
