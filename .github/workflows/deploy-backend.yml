name: Deploy Backend to VPC2 (Simple Strategy)
# v.0.0.9
on:
  push:
    branches: [release]
    paths:
      - "src/**"
      - "build.gradle"
      - ".github/workflows/**"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  JAVA_VERSION: 17
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  S3_KEY: releases/empick-backend-latest.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 🔧 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 📦 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean build -x test

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📤 Upload JAR to S3
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*plain*" | head -n 1)
          echo "Uploading $JAR_FILE to S3..."
          aws s3 cp "$JAR_FILE" s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}
          echo "✅ JAR uploaded successfully"

      - name: 🔑 Setup SSH Key
        run: |
          echo "🔑 Setting up SSH key for deployment..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/camp.pem
          chmod 600 ~/.ssh/camp.pem

          # Debug: Check if BASTION_HOST is set
          echo "🔍 Bastion Host: ${{ secrets.BASTION_HOST }}"

          # Add bastion host to known_hosts (with error handling)
          if [ -n "${{ secrets.BASTION_HOST }}" ]; then
            echo "📡 Adding bastion host to known_hosts..."
            ssh-keyscan -t rsa,ecdsa,ed25519 ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts || echo "⚠️ ssh-keyscan failed, continuing with StrictHostKeyChecking=no"
          else
            echo "⚠️ BASTION_HOST secret is not set!"
            exit 1
          fi

          # SSH config for easier connection
          echo "🔧 Creating SSH config..."
          cat >> ~/.ssh/config << EOF
          # Global SSH settings
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 3
            
          Host bastion
            HostName ${{ secrets.BASTION_HOST }}
            User ec2-user
            IdentityFile ~/.ssh/camp.pem
            
          Host blue-instance
            HostName ${{ secrets.BLUE_PRIVATE_IP }}
            User ec2-user
            ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p bastion
            IdentityFile ~/.ssh/camp.pem
            
          Host green-instance
            HostName ${{ secrets.GREEN_PRIVATE_IP }}
            User ec2-user
            ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p bastion
            IdentityFile ~/.ssh/camp.pem
          EOF

          echo "📋 SSH config created:"
          cat ~/.ssh/config

                    # Test SSH connection
          echo "🔍 Testing SSH connection to bastion..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes bastion "echo 'Bastion connection successful'"; then
            echo "✅ Bastion connection successful"
          else
            echo "❌ Bastion connection failed"
            exit 1
          fi

          echo "🔍 Testing SSH connection to Blue instance..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes blue-instance "echo 'Blue instance connection successful'"; then
            echo "✅ Blue instance connection successful"
          else
            echo "❌ Blue instance connection failed"
            exit 1
          fi

          echo "🔍 Testing SSH connection to Green instance..."
          if ssh -o ConnectTimeout=10 -o BatchMode=yes green-instance "echo 'Green instance connection successful'"; then
            echo "✅ Green instance connection successful"
          else
            echo "❌ Green instance connection failed"
            exit 1
          fi

      - name: 🔧 Update Environment Variables
        run: |
          echo "🔧 Updating environment variables on both instances..."

          # Create environment file content
          ENV_CONTENT="# Server Configuration
          SERVER_PORT=8080

          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Redis Configuration
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}

          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # Email Configuration
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=587
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}

          # AWS S3 Configuration
          AWS_S3_BUCKET=${{ secrets.S3_BUCKET }}
          AWS_S3_REGION=ap-northeast-2
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

          # Update Blue Instance Environment
          echo "📦 Updating Blue Instance environment..."
          ssh blue-instance "
            echo '🔧 Updating environment variables on Blue instance...'
            sudo bash -c 'cat > /opt/empick/.env << \"EOF\"
          $ENV_CONTENT
          EOF'
            sudo chown springboot:springboot /opt/empick/.env
            sudo chmod 600 /opt/empick/.env
            echo '✅ Environment variables updated on Blue instance'
          "

          # Update Green Instance Environment
          echo "📦 Updating Green Instance environment..."
          ssh green-instance "
            echo '🔧 Updating environment variables on Green instance...'
            sudo bash -c 'cat > /opt/empick/.env << \"EOF\"
          $ENV_CONTENT
          EOF'
            sudo chown springboot:springboot /opt/empick/.env
            sudo chmod 600 /opt/empick/.env
            echo '✅ Environment variables updated on Green instance'
          "

      - name: 🚀 Deploy to Both Instances (SSH Strategy)
        run: |
          echo "🔄 Starting deployment to both Blue and Green instances..."

          # Deploy to Blue Instance (AZ-A)
          echo "📦 Deploying to Blue Instance..."
          ssh blue-instance '
            echo "🔄 Starting deployment on Blue instance..."
            sudo systemctl stop empick-backend || true
            cd /opt/empick
            
            # Remove old JAR file
            sudo rm -f empick-backend.jar
            
            # Download new JAR file using AWS CLI (more reliable than wget)
            sudo -u springboot aws s3 cp s3://${{ secrets.S3_BUCKET }}/releases/empick-backend-latest.jar empick-backend.jar
            
            # Set proper permissions
            sudo chown springboot:springboot empick-backend.jar
            sudo chmod +x empick-backend.jar
            
            # Verify file was downloaded successfully
            if [ -f empick-backend.jar ]; then
              echo "✅ JAR file downloaded successfully"
              ls -la empick-backend.jar
            else
              echo "❌ JAR file download failed"
              exit 1
            fi
            
            sudo systemctl start empick-backend
            echo "✅ Deployment completed on Blue instance"
          '

          # Deploy to Green Instance (AZ-C)  
          echo "📦 Deploying to Green Instance..."
          ssh green-instance '
            echo "🔄 Starting deployment on Green instance..."
            sudo systemctl stop empick-backend || true
            cd /opt/empick
            
            # Remove old JAR file
            sudo rm -f empick-backend.jar
            
            # Download new JAR file using AWS CLI (more reliable than wget)
            sudo -u springboot aws s3 cp s3://${{ secrets.S3_BUCKET }}/releases/empick-backend-latest.jar empick-backend.jar
            
            # Set proper permissions
            sudo chown springboot:springboot empick-backend.jar
            sudo chmod +x empick-backend.jar
            
            # Verify file was downloaded successfully
            if [ -f empick-backend.jar ]; then
              echo "✅ JAR file downloaded successfully"
              ls -la empick-backend.jar
            else
              echo "❌ JAR file download failed"
              exit 1
            fi
            
            sudo systemctl start empick-backend
            echo "✅ Deployment completed on Green instance"
          '

      - name: ⏰ Wait for services to start
        run: |
          echo "⏰ Waiting 60 seconds for services to start..."
          sleep 60

          echo "🔍 Checking service status on both instances..."

          # Check Blue instance service status
          echo "📊 Blue instance service status:"
          ssh blue-instance "sudo systemctl status empick-backend --no-pager -l" || true

          # Check Green instance service status  
          echo "📊 Green instance service status:"
          ssh green-instance "sudo systemctl status empick-backend --no-pager -l" || true

          # Check if services are listening on port 8080
          echo "🔍 Checking if services are listening on port 8080..."
          ssh blue-instance "sudo netstat -tlnp | grep :8080 || echo 'Blue instance not listening on port 8080'" || true
          ssh green-instance "sudo netstat -tlnp | grep :8080 || echo 'Green instance not listening on port 8080'" || true

      - name: 🏥 Health Check
        run: |
          echo "🏥 Performing health checks..."

          # ALB Health Check (최종 확인)
          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12..."
            if curl -f -s ${{ secrets.ALB_HEALTH_CHECK_URL }}; then
              echo "✅ ALB Health check passed!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ Health check failed after 12 attempts"
              exit 1
            fi
            sleep 15
          done

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 Deployment Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ JAR Build: SUCCESS"
          echo "✅ S3 Upload: SUCCESS" 
          echo "✅ Environment Update: SUCCESS"
          echo "✅ Blue Instance Deploy: SUCCESS"
          echo "✅ Green Instance Deploy: SUCCESS"
          echo "✅ Health Check: SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Application URL: ${{ secrets.ALB_URL }}"
          echo "🏥 Health Check: ${{ secrets.ALB_HEALTH_CHECK_URL }}"
          echo "📊 API Endpoint: ${{ secrets.ALB_URL }}/api"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Troubleshooting steps:"
          echo "1. Check environment variables: cat /opt/empick/.env"
          echo "2. Check service logs: sudo journalctl -u empick-backend -f"
          echo "3. Verify DB connection: mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USERNAME }} -p"
          echo "4. Check JAR file: ls -la /opt/empick/empick-backend.jar"
